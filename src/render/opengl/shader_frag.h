global CStr opengl_shader_frag =
    "#version 450 core\n"
    "\n"
    "in vec2  vert_pos;\n"
    "in vec2  vert_uv;\n"
    "in mat4  vert_colors;\n"
    "in float vert_softness;\n"
    "in float vert_border_thickness;\n"
    "in float vertex_id;\n"
    "in flat vec4 vert_radies;\n"
    "in flat float vert_omit_texture;\n"
    "in flat float vert_is_subpixel_text;\n"
    "in flat float vert_use_nearest;\n"
    "// TODO(simon): See if we can avoid passing these\n"
    "in flat vec2 vert_center;\n"
    "in flat vec2 vert_half_size;\n"
    "in flat vec2 vert_min_uv;\n"
    "in flat vec2 vert_max_uv;\n"
    "\n"
    "layout(location = 0, index = 0) out vec4 frag_color;\n"
    "layout(location = 0, index = 1) out vec4 frag_blend_weights;\n"
    "\n"
    "uniform mat4      uniform_projection;\n"
    "uniform sampler2D uniform_sampler;\n"
    "\n"
    "float\n"
    "rounded_rect_sdf(vec2 sample_pos, vec2 rect_center, vec2 rect_half_size, float radius)\n"
    "{\n"
        "vec2 d2 = abs(rect_center - sample_pos) - rect_half_size + radius;\n"
        "return min(max(d2.x, d2.y), 0.0) + length(max(d2, 0.0)) - radius;\n"
    "}\n"
    "\n"
    "vec2\n"
    "rect_uv(vec2 sample_pos, vec2 rect_center, vec2 rect_half_size)\n"
    "{\n"
        "return (rect_center - sample_pos + rect_half_size) / (2.0 * rect_half_size);\n"
    "}\n"
    "\n"
    "// Converts a color from linear light gamma to sRGB gamma\n"
    "vec4\n"
    "fromLinear(vec4 linearRGB)\n"
    "{\n"
        "bvec3 cutoff = lessThan(linearRGB.rgb, vec3(0.0031308));\n"
        "vec3  higher = vec3(1.055) * pow(linearRGB.rgb, vec3(1.0 / 2.4)) - vec3(0.055);\n"
        "vec3  lower  = linearRGB.rgb * vec3(12.92);\n"
    "\n"
        "return vec4(mix(higher, lower, cutoff), linearRGB.a);\n"
    "}\n"
    "\n"
    "// Converts a color from sRGB gamma to linear light gamma\n"
    "vec4\n"
    "toLinear(vec4 sRGB)\n"
    "{\n"
        "bvec3 cutoff = lessThan(sRGB.rgb, vec3(0.04045));\n"
        "vec3  higher = pow((sRGB.rgb + vec3(0.055)) / vec3(1.055), vec3(2.4));\n"
        "vec3  lower  = sRGB.rgb / vec3(12.92);\n"
    "\n"
        "return vec4(mix(higher, lower, cutoff), sRGB.a);\n"
    "}\n"
    "\n"
    "void\n"
    "main()\n"
    "{\n"
        "float radius = vert_radies[int(round(vertex_id))];\n"
        "float softness_padding = max(0, vert_softness * 2 - 1);\n"
        "vec2 color_uv = rect_uv(vert_pos, vert_center, vert_half_size - softness_padding);\n"
        "float dist = rounded_rect_sdf(vert_pos, vert_center, vert_half_size - softness_padding, radius);\n"
        "float sdf_factor = 1.0 - smoothstep(0, 2 * vert_softness, dist);\n"
    "\n"
        "// NOTE(simon): OpenGL shenanigans with flipping the coordinate system.\n"
        "vec4 color_top    = mix(vert_colors[3], vert_colors[2], color_uv.x);\n"
        "vec4 color_bottom = mix(vert_colors[1], vert_colors[0], color_uv.x);\n"
        "vec4 color        = mix(color_top,      color_bottom,   color_uv.y);\n"
    "\n"
        "float border_factor = 1.f;\n"
        "if (vert_border_thickness != 0)\n"
        "{\n"
            "vec2 interior_half_size = vert_half_size - vert_border_thickness;\n"
    "\n"
            "float interior_radius_reduce_f = min(interior_half_size.x / vert_half_size.x, interior_half_size.y / vert_half_size.y);\n"
            "float interior_corner_radius = radius * interior_radius_reduce_f * interior_radius_reduce_f;\n"
    "\n"
            "float inside_dist = rounded_rect_sdf(vert_pos, vert_center, interior_half_size - softness_padding, interior_corner_radius);\n"
    "\n"
            "float inside_factor = smoothstep(0, 2 * vert_softness, inside_dist);\n"
            "border_factor = inside_factor;\n"
        "}\n"
    "\n"
        "vec4 sample_color = vec4(1.0);\n"
        "if (vert_omit_texture < 1)\n"
        "{\n"
            "vec2 uv = vert_uv;\n"
            "if (vert_use_nearest > 0)\n"
            "{\n"
                "vec2 texture_size = textureSize(uniform_sampler, 0);\n"
                "uv = (floor(uv * texture_size) + 0.5) / texture_size;\n"
            "}\n"
            "sample_color = texture(uniform_sampler, clamp(uv, vert_min_uv, vert_max_uv));\n"
        "}\n"
    "\n"
        "if (vert_is_subpixel_text < 1)\n"
        "{\n"
            "vec4 blended_color = sample_color * color;\n"
            "blended_color.a   *= sdf_factor * border_factor;\n"
    "\n"
            "frag_color         = blended_color;\n"
            "frag_blend_weights = vec4(blended_color.a);\n"
        "}\n"
        "else\n"
        "{\n"
            "sample_color       = fromLinear(sample_color);\n"
            "frag_color         = color;\n"
            "frag_blend_weights = vec4(sample_color.rgb * color.a, 0.0);\n"
        "}\n"
    "}\n";
